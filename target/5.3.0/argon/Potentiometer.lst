
/Users/admin/Documents/CTD_2023/Personal_Projects/Potentiometer/target/5.3.0/argon/Potentiometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000014bc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b54d8  000b54d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e604  000b54fc  0000e604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000174  2003e67c  2003e67c  0001e67c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5574  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5578  000b5578  00015578  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b557e  000b557e  0001557e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b55a2  000b55a2  000155a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f8d23  00000000  00000000  000155a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f841  00000000  00000000  0010e2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00034061  00000000  00000000  0011db0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002698  00000000  00000000  00151b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009d00  00000000  00000000  00154203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000335dc  00000000  00000000  0015df03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000345fd  00000000  00000000  001914df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013a888  00000000  00000000  001c5adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006d60  00000000  00000000  00300364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 f885 	bl	b514c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 f88d 	bl	b5168 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e604 	.word	0x2003e604
   b4058:	000b54fc 	.word	0x000b54fc
   b405c:	2003e67c 	.word	0x2003e67c
   b4060:	2003e67c 	.word	0x2003e67c
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 ff2f 	bl	b4ed0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b54b4 	.word	0x000b54b4
   b408c:	000b54d8 	.word	0x000b54d8

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b91c 	b.w	b42cc <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f885 	bl	b41a4 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 becf 	b.w	b4e40 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 bb37 	b.w	b4714 <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 bb35 	b.w	b4714 <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f000 bb3b 	b.w	b4724 <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr

000b40be <_ZN13Potentiometer6updateEv>:
    pin = PIN;
    pinMode(pin, INPUT);
    updates.push_back(std::bind(&Potentiometer::update, this));
  }
  int val = analogRead(pin);
  void update()
   b40be:	b510      	push	{r4, lr}
   b40c0:	4604      	mov	r4, r0
  {
    val = analogRead(pin);
   b40c2:	8800      	ldrh	r0, [r0, #0]
   b40c4:	f000 ff9e 	bl	b5004 <analogRead>
   b40c8:	6060      	str	r0, [r4, #4]
  }
   b40ca:	bd10      	pop	{r4, pc}

000b40cc <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b40cc:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b40ce:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b40d0:	685a      	ldr	r2, [r3, #4]
   b40d2:	6899      	ldr	r1, [r3, #8]
   b40d4:	681b      	ldr	r3, [r3, #0]
   b40d6:	1054      	asrs	r4, r2, #1
   b40d8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b40dc:	07d2      	lsls	r2, r2, #31
   b40de:	bf48      	it	mi
   b40e0:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b40e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b40e6:	bf48      	it	mi
   b40e8:	58d3      	ldrmi	r3, [r2, r3]
   b40ea:	4718      	bx	r3

000b40ec <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b40ec:	b513      	push	{r0, r1, r4, lr}
   b40ee:	460a      	mov	r2, r1
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b40f0:	4603      	mov	r3, r0
   b40f2:	b1b0      	cbz	r0, b4122 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0+0x36>
    _Function_base() : _M_manager(nullptr) { }
   b40f4:	2100      	movs	r1, #0
   b40f6:	6081      	str	r1, [r0, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b40f8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b40fc:	466c      	mov	r4, sp
   b40fe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4102:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4106:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b410a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b410e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4112:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4114:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4116:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4118:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b411a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b411c:	68d8      	ldr	r0, [r3, #12]
   b411e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4120:	60d9      	str	r1, [r3, #12]
   b4122:	b002      	add	sp, #8
   b4124:	bd10      	pop	{r4, pc}

000b4126 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4126:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4128:	b538      	push	{r3, r4, r5, lr}
   b412a:	4604      	mov	r4, r0
	switch (__op)
   b412c:	d102      	bne.n	b4134 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b412e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4130:	6023      	str	r3, [r4, #0]
	}
   b4132:	e003      	b.n	b413c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4134:	2a02      	cmp	r2, #2
   b4136:	d003      	beq.n	b4140 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4138:	2a03      	cmp	r2, #3
   b413a:	d00d      	beq.n	b4158 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b413c:	2000      	movs	r0, #0
   b413e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4140:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4142:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4144:	f7ff ffad 	bl	b40a2 <_Znwj>
   b4148:	4603      	mov	r3, r0
   b414a:	2800      	cmp	r0, #0
   b414c:	d0f0      	beq.n	b4130 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b414e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4156:	e7eb      	b.n	b4130 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4158:	6800      	ldr	r0, [r0, #0]
   b415a:	2800      	cmp	r0, #0
   b415c:	d0ee      	beq.n	b413c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b415e:	210c      	movs	r1, #12
   b4160:	f7ff ffa3 	bl	b40aa <_ZdlPvj>
   b4164:	e7ea      	b.n	b413c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b4166 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4166:	b510      	push	{r4, lr}
      if (_M_manager)
   b4168:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b416a:	4604      	mov	r4, r0
      if (_M_manager)
   b416c:	b113      	cbz	r3, b4174 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b416e:	2203      	movs	r2, #3
   b4170:	4601      	mov	r1, r0
   b4172:	4798      	blx	r3
    }
   b4174:	4620      	mov	r0, r4
   b4176:	bd10      	pop	{r4, pc}

000b4178 <_Z6updatev>:
    }
  }
};

void update()
{
   b4178:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b417a:	4d09      	ldr	r5, [pc, #36]	; (b41a0 <_Z6updatev+0x28>)
  for (uint i = 0; i < updates.size(); i++)
   b417c:	2400      	movs	r4, #0
   b417e:	e9d5 0300 	ldrd	r0, r3, [r5]
   b4182:	1a1b      	subs	r3, r3, r0
   b4184:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   b4188:	d209      	bcs.n	b419e <_Z6updatev+0x26>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b418a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b418e:	6883      	ldr	r3, [r0, #8]
   b4190:	b90b      	cbnz	r3, b4196 <_Z6updatev+0x1e>
	__throw_bad_function_call();
   b4192:	f000 ffd2 	bl	b513a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4196:	68c3      	ldr	r3, [r0, #12]
   b4198:	4798      	blx	r3
   b419a:	3401      	adds	r4, #1
   b419c:	e7ef      	b.n	b417e <_Z6updatev+0x6>
  {
    updates[i]();
  }
}
   b419e:	bd38      	pop	{r3, r4, r5, pc}
   b41a0:	2003e6ac 	.word	0x2003e6ac

000b41a4 <loop>:
  lights.initialize(lightPins);
  p1.initialize(A4);
  Serial.begin(9600);
}
void loop()
{
   b41a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41a6:	ed2d 8b02 	vpush	{d8}
  update();
   b41aa:	f7ff ffe5 	bl	b4178 <_Z6updatev>
  float leds = p1.val * 6 / 4095;
   b41ae:	4b17      	ldr	r3, [pc, #92]	; (b420c <loop+0x68>)
      lightsInGroup[i].off();
   b41b0:	4e17      	ldr	r6, [pc, #92]	; (b4210 <loop+0x6c>)
  float leds = p1.val * 6 / 4095;
   b41b2:	685b      	ldr	r3, [r3, #4]
   b41b4:	2206      	movs	r2, #6
   b41b6:	4353      	muls	r3, r2
   b41b8:	f640 72ff 	movw	r2, #4095	; 0xfff
   b41bc:	fb93 f3f2 	sdiv	r3, r3, r2
   b41c0:	ee07 3a90 	vmov	s15, r3
   b41c4:	2400      	movs	r4, #0
   b41c6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    val = false;
   b41ca:	4625      	mov	r5, r4
      lightsInGroup[i].off();
   b41cc:	6833      	ldr	r3, [r6, #0]
    val = false;
   b41ce:	551d      	strb	r5, [r3, r4]
      lightsInGroup[i].off();
   b41d0:	191a      	adds	r2, r3, r4
    digitalWrite(pin, LOW);
   b41d2:	2100      	movs	r1, #0
   b41d4:	8850      	ldrh	r0, [r2, #2]
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b41d6:	3404      	adds	r4, #4
    digitalWrite(pin, LOW);
   b41d8:	f000 fefb 	bl	b4fd2 <digitalWrite>
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b41dc:	2c14      	cmp	r4, #20
   b41de:	d1f5      	bne.n	b41cc <loop+0x28>
  lights.allOff();
  lights.onTo((int)leds);
   b41e0:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    for (int i = 0; i < index; i++)
   b41e4:	2500      	movs	r5, #0
    val = true;
   b41e6:	2701      	movs	r7, #1
    for (int i = 0; i < index; i++)
   b41e8:	ee18 3a10 	vmov	r3, s16
   b41ec:	42ab      	cmp	r3, r5
   b41ee:	dd0a      	ble.n	b4206 <loop+0x62>
      lightsInGroup[i].on();
   b41f0:	6833      	ldr	r3, [r6, #0]
    val = true;
   b41f2:	f803 7025 	strb.w	r7, [r3, r5, lsl #2]
      lightsInGroup[i].on();
   b41f6:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    digitalWrite(pin, HIGH);
   b41fa:	2101      	movs	r1, #1
   b41fc:	8850      	ldrh	r0, [r2, #2]
   b41fe:	f000 fee8 	bl	b4fd2 <digitalWrite>
    for (int i = 0; i < index; i++)
   b4202:	3501      	adds	r5, #1
   b4204:	e7f0      	b.n	b41e8 <loop+0x44>
   b4206:	ecbd 8b02 	vpop	{d8}
   b420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b420c:	2003e6a4 	.word	0x2003e6a4
   b4210:	2003e69c 	.word	0x2003e69c

000b4214 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4218:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b421c:	4607      	mov	r7, r0

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b421e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4222:	ebab 0008 	sub.w	r0, fp, r8
	if (max_size() - size() < __n)
   b4226:	ebb3 1f20 	cmp.w	r3, r0, asr #4
   b422a:	468a      	mov	sl, r1
   b422c:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b422e:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (max_size() - size() < __n)
   b4232:	d102      	bne.n	b423a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4234:	4824      	ldr	r0, [pc, #144]	; (b42c8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xb4>)
   b4236:	f000 ff7d 	bl	b5134 <_ZSt20__throw_length_errorPKc>
   b423a:	2a01      	cmp	r2, #1
   b423c:	4614      	mov	r4, r2
   b423e:	bf38      	it	cc
   b4240:	2401      	movcc	r4, #1
   b4242:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4244:	ebaa 0508 	sub.w	r5, sl, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4248:	d21b      	bcs.n	b4282 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b424a:	b1e4      	cbz	r4, b4286 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
   b424c:	429c      	cmp	r4, r3
   b424e:	bf28      	it	cs
   b4250:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4252:	0120      	lsls	r0, r4, #4
   b4254:	9101      	str	r1, [sp, #4]
   b4256:	f7ff ff24 	bl	b40a2 <_Znwj>
   b425a:	9901      	ldr	r1, [sp, #4]
   b425c:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b425e:	1970      	adds	r0, r6, r5
   b4260:	f7ff ff44 	bl	b40ec <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4264:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b4266:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b4268:	45aa      	cmp	sl, r5
   b426a:	f100 0910 	add.w	r9, r0, #16
   b426e:	d00c      	beq.n	b428a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
   b4270:	4629      	mov	r1, r5
   b4272:	f7ff ff3b 	bl	b40ec <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4276:	4628      	mov	r0, r5
   b4278:	f7ff ff75 	bl	b4166 <_ZNSt14_Function_baseD1Ev>
   b427c:	3510      	adds	r5, #16
   b427e:	4648      	mov	r0, r9
   b4280:	e7f2      	b.n	b4268 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4282:	461c      	mov	r4, r3
   b4284:	e7e5      	b.n	b4252 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4286:	4626      	mov	r6, r4
   b4288:	e7e9      	b.n	b425e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b428a:	455d      	cmp	r5, fp
   b428c:	d00a      	beq.n	b42a4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>
   b428e:	4629      	mov	r1, r5
   b4290:	4648      	mov	r0, r9
   b4292:	f7ff ff2b 	bl	b40ec <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
   b4296:	4628      	mov	r0, r5
   b4298:	f7ff ff65 	bl	b4166 <_ZNSt14_Function_baseD1Ev>
   b429c:	3510      	adds	r5, #16
   b429e:	f109 0910 	add.w	r9, r9, #16
   b42a2:	e7f2      	b.n	b428a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
	if (__p)
   b42a4:	f1b8 0f00 	cmp.w	r8, #0
   b42a8:	d005      	beq.n	b42b6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b42aa:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b42ac:	4640      	mov	r0, r8
   b42ae:	eba1 0108 	sub.w	r1, r1, r8
   b42b2:	f7ff fefa 	bl	b40aa <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b42b6:	eb06 1404 	add.w	r4, r6, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b42ba:	e9c7 6900 	strd	r6, r9, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b42be:	60bc      	str	r4, [r7, #8]
    }
   b42c0:	b003      	add	sp, #12
   b42c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b42c6:	bf00      	nop
   b42c8:	000b52b4 	.word	0x000b52b4

000b42cc <setup>:
{
   b42cc:	b530      	push	{r4, r5, lr}
    pins = PINS;
   b42ce:	4d21      	ldr	r5, [pc, #132]	; (b4354 <setup+0x88>)
   b42d0:	4b21      	ldr	r3, [pc, #132]	; (b4358 <setup+0x8c>)
   b42d2:	606b      	str	r3, [r5, #4]
{
   b42d4:	b085      	sub	sp, #20
    pins = PINS;
   b42d6:	2400      	movs	r4, #0
      lightsInGroup[i].initialize(pins[i]);
   b42d8:	686b      	ldr	r3, [r5, #4]
   b42da:	5b18      	ldrh	r0, [r3, r4]
    pin = PIN;
   b42dc:	682b      	ldr	r3, [r5, #0]
   b42de:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    pinMode(pin, OUTPUT);
   b42e2:	2101      	movs	r1, #1
    pin = PIN;
   b42e4:	8058      	strh	r0, [r3, #2]
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b42e6:	3402      	adds	r4, #2
    pinMode(pin, OUTPUT);
   b42e8:	f000 fe62 	bl	b4fb0 <pinMode>
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b42ec:	2c0a      	cmp	r4, #10
   b42ee:	d1f3      	bne.n	b42d8 <setup+0xc>
    pin = PIN;
   b42f0:	4c1a      	ldr	r4, [pc, #104]	; (b435c <setup+0x90>)
   b42f2:	200f      	movs	r0, #15
    pinMode(pin, INPUT);
   b42f4:	2100      	movs	r1, #0
    pin = PIN;
   b42f6:	8020      	strh	r0, [r4, #0]
    _Function_base() : _M_manager(nullptr) { }
   b42f8:	2500      	movs	r5, #0
    pinMode(pin, INPUT);
   b42fa:	f000 fe59 	bl	b4fb0 <pinMode>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42fe:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b4300:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4302:	f7ff fece 	bl	b40a2 <_Znwj>
   b4306:	b118      	cbz	r0, b4310 <setup+0x44>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b4308:	4b15      	ldr	r3, [pc, #84]	; (b4360 <setup+0x94>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b430a:	6084      	str	r4, [r0, #8]
   b430c:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b4310:	4b14      	ldr	r3, [pc, #80]	; (b4364 <setup+0x98>)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4312:	4c15      	ldr	r4, [pc, #84]	; (b4368 <setup+0x9c>)
   b4314:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4316:	4b15      	ldr	r3, [pc, #84]	; (b436c <setup+0xa0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4318:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b431a:	9302      	str	r3, [sp, #8]
   b431c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   b4320:	4298      	cmp	r0, r3
   b4322:	d011      	beq.n	b4348 <setup+0x7c>
   b4324:	4669      	mov	r1, sp
   b4326:	f7ff fee1 	bl	b40ec <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b432a:	6863      	ldr	r3, [r4, #4]
   b432c:	3310      	adds	r3, #16
   b432e:	6063      	str	r3, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b4330:	4668      	mov	r0, sp
   b4332:	f7ff ff18 	bl	b4166 <_ZNSt14_Function_baseD1Ev>
  Serial.begin(9600);
   b4336:	f000 fcfd 	bl	b4d34 <_Z16_fetch_usbserialv>
   b433a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   b433e:	b005      	add	sp, #20
   b4340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.begin(9600);
   b4344:	f000 bcea 	b.w	b4d1c <_ZN9USBSerial5beginEl>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b4348:	4601      	mov	r1, r0
   b434a:	466a      	mov	r2, sp
   b434c:	4620      	mov	r0, r4
   b434e:	f7ff ff61 	bl	b4214 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   b4352:	e7ed      	b.n	b4330 <setup+0x64>
   b4354:	2003e69c 	.word	0x2003e69c
   b4358:	2003e604 	.word	0x2003e604
   b435c:	2003e6a4 	.word	0x2003e6a4
   b4360:	000b40bf 	.word	0x000b40bf
   b4364:	000b40cd 	.word	0x000b40cd
   b4368:	2003e6ac 	.word	0x2003e6ac
   b436c:	000b4127 	.word	0x000b4127

000b4370 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4370:	4b10      	ldr	r3, [pc, #64]	; (b43b4 <_GLOBAL__sub_I_SystemMode+0x44>)
    SleepResult() {}
   b4372:	4a11      	ldr	r2, [pc, #68]	; (b43b8 <_GLOBAL__sub_I_SystemMode+0x48>)
   b4374:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4376:	2400      	movs	r4, #0
   b4378:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b437c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b437e:	2003      	movs	r0, #3
   b4380:	f000 f93c 	bl	b45fc <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4384:	4621      	mov	r1, r4
   b4386:	2001      	movs	r0, #1
   b4388:	f000 f940 	bl	b460c <system_thread_set_state>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b438c:	4b0b      	ldr	r3, [pc, #44]	; (b43bc <_GLOBAL__sub_I_SystemMode+0x4c>)
  {
   b438e:	4a0c      	ldr	r2, [pc, #48]	; (b43c0 <_GLOBAL__sub_I_SystemMode+0x50>)
   b4390:	609c      	str	r4, [r3, #8]
   b4392:	e9c3 4400 	strd	r4, r4, [r3]
class LED
   b4396:	4b0b      	ldr	r3, [pc, #44]	; (b43c4 <_GLOBAL__sub_I_SystemMode+0x54>)
    lightsInGroup = array;
   b4398:	e9c2 3400 	strd	r3, r4, [r2]
class LED
   b439c:	701c      	strb	r4, [r3, #0]
   b439e:	711c      	strb	r4, [r3, #4]
   b43a0:	721c      	strb	r4, [r3, #8]
   b43a2:	731c      	strb	r4, [r3, #12]
   b43a4:	741c      	strb	r4, [r3, #16]
class Potentiometer
   b43a6:	4c08      	ldr	r4, [pc, #32]	; (b43c8 <_GLOBAL__sub_I_SystemMode+0x58>)
   b43a8:	8820      	ldrh	r0, [r4, #0]
   b43aa:	f000 fe2b 	bl	b5004 <analogRead>
   b43ae:	6060      	str	r0, [r4, #4]
   b43b0:	bd10      	pop	{r4, pc}
   b43b2:	bf00      	nop
   b43b4:	2003e67c 	.word	0x2003e67c
   b43b8:	ffff0000 	.word	0xffff0000
   b43bc:	2003e6ac 	.word	0x2003e6ac
   b43c0:	2003e69c 	.word	0x2003e69c
   b43c4:	2003e688 	.word	0x2003e688
   b43c8:	2003e6a4 	.word	0x2003e6a4

000b43cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <os_mutex_recursive_create+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	00030248 	.word	0x00030248

000b43dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <HAL_RNG_GetRandomNumber+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	685b      	ldr	r3, [r3, #4]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030218 	.word	0x00030218

000b43ec <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	695b      	ldr	r3, [r3, #20]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030218 	.word	0x00030218

000b43fc <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_pin_validate_function+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	685b      	ldr	r3, [r3, #4]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003022c 	.word	0x0003022c

000b440c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <hal_gpio_mode+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	689b      	ldr	r3, [r3, #8]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	0003022c 	.word	0x0003022c

000b441c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <hal_gpio_get_mode+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	68db      	ldr	r3, [r3, #12]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	0003022c 	.word	0x0003022c

000b442c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <hal_gpio_write+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	691b      	ldr	r3, [r3, #16]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003022c 	.word	0x0003022c

000b443c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <hal_adc_read+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003022c 	.word	0x0003022c

000b444c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <hal_i2c_write+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	6a1b      	ldr	r3, [r3, #32]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030228 	.word	0x00030228

000b445c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <hal_i2c_available+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030228 	.word	0x00030228

000b446c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <hal_i2c_read+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	00030228 	.word	0x00030228

000b447c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <hal_i2c_peek+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030228 	.word	0x00030228

000b448c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <hal_i2c_flush+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030228 	.word	0x00030228

000b449c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <hal_i2c_is_enabled+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030228 	.word	0x00030228

000b44ac <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <hal_i2c_init+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030228 	.word	0x00030228

000b44bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <inet_inet_ntop+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	695b      	ldr	r3, [r3, #20]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030264 	.word	0x00030264

000b44cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <netdb_freeaddrinfo+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	689b      	ldr	r3, [r3, #8]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030268 	.word	0x00030268

000b44dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <netdb_getaddrinfo+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	68db      	ldr	r3, [r3, #12]
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030268 	.word	0x00030268

000b44ec <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <hal_spi_init+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	69db      	ldr	r3, [r3, #28]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030230 	.word	0x00030230

000b44fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_spi_is_enabled+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6a1b      	ldr	r3, [r3, #32]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030230 	.word	0x00030230

000b450c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <hal_usart_write+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	68db      	ldr	r3, [r3, #12]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003023c 	.word	0x0003023c

000b451c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <hal_usart_available+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	691b      	ldr	r3, [r3, #16]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003023c 	.word	0x0003023c

000b452c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <hal_usart_read+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	695b      	ldr	r3, [r3, #20]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003023c 	.word	0x0003023c

000b453c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_usart_peek+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	699b      	ldr	r3, [r3, #24]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	0003023c 	.word	0x0003023c

000b454c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <hal_usart_flush+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	69db      	ldr	r3, [r3, #28]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003023c 	.word	0x0003023c

000b455c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <hal_usart_is_enabled+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6a1b      	ldr	r3, [r3, #32]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003023c 	.word	0x0003023c

000b456c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <hal_usart_available_data_for_write+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003023c 	.word	0x0003023c

000b457c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <hal_usart_init_ex+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003023c 	.word	0x0003023c

000b458c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <HAL_USB_USART_Init+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	681b      	ldr	r3, [r3, #0]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003024c 	.word	0x0003024c

000b459c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <HAL_USB_USART_Begin+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	685b      	ldr	r3, [r3, #4]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003024c 	.word	0x0003024c

000b45ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <HAL_USB_USART_Available_Data+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	691b      	ldr	r3, [r3, #16]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	0003024c 	.word	0x0003024c

000b45bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	695b      	ldr	r3, [r3, #20]
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	0003024c 	.word	0x0003024c

000b45cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <HAL_USB_USART_Receive_Data+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	699b      	ldr	r3, [r3, #24]
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	0003024c 	.word	0x0003024c

000b45dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <HAL_USB_USART_Send_Data+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	69db      	ldr	r3, [r3, #28]
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	0003024c 	.word	0x0003024c

000b45ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <HAL_USB_USART_Flush_Data+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	6a1b      	ldr	r3, [r3, #32]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	0003024c 	.word	0x0003024c

000b45fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <set_system_mode+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	685b      	ldr	r3, [r3, #4]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	00030220 	.word	0x00030220

000b460c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <system_thread_set_state+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030220 	.word	0x00030220

000b461c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b03      	ldr	r3, [pc, #12]	; (b462c <system_ctrl_set_app_request_handler+0x10>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4626:	9301      	str	r3, [sp, #4]
   b4628:	bd08      	pop	{r3, pc}
   b462a:	0000      	.short	0x0000
   b462c:	00030220 	.word	0x00030220

000b4630 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b03      	ldr	r3, [pc, #12]	; (b4640 <system_ctrl_set_result+0x10>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b463a:	9301      	str	r3, [sp, #4]
   b463c:	bd08      	pop	{r3, pc}
   b463e:	0000      	.short	0x0000
   b4640:	00030220 	.word	0x00030220

000b4644 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030244 	.word	0x00030244

000b4654 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <network_connect+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	685b      	ldr	r3, [r3, #4]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030240 	.word	0x00030240

000b4664 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <network_connecting+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	689b      	ldr	r3, [r3, #8]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030240 	.word	0x00030240

000b4674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <network_disconnect+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	68db      	ldr	r3, [r3, #12]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030240 	.word	0x00030240

000b4684 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <network_ready+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	691b      	ldr	r3, [r3, #16]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030240 	.word	0x00030240

000b4694 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <network_on+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	695b      	ldr	r3, [r3, #20]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030240 	.word	0x00030240

000b46a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <network_off+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	699b      	ldr	r3, [r3, #24]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030240 	.word	0x00030240

000b46b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <network_listen+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	69db      	ldr	r3, [r3, #28]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030240 	.word	0x00030240

000b46c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <network_listening+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6a1b      	ldr	r3, [r3, #32]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030240 	.word	0x00030240

000b46d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <network_set_listen_timeout+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030240 	.word	0x00030240

000b46e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <network_get_listen_timeout+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030240 	.word	0x00030240

000b46f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <network_is_on+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030240 	.word	0x00030240

000b4704 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <network_is_off+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030240 	.word	0x00030240

000b4714 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <malloc+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	681b      	ldr	r3, [r3, #0]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	0003021c 	.word	0x0003021c

000b4724 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <free+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	685b      	ldr	r3, [r3, #4]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	0003021c 	.word	0x0003021c

000b4734 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <abort+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003021c 	.word	0x0003021c

000b4744 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <__assert_func+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003021c 	.word	0x0003021c

000b4754 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <newlib_impure_ptr_callback+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003021c 	.word	0x0003021c

000b4764 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4764:	4802      	ldr	r0, [pc, #8]	; (b4770 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4766:	2300      	movs	r3, #0
   b4768:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b476a:	f7ff be2f 	b.w	b43cc <os_mutex_recursive_create>
   b476e:	bf00      	nop
   b4770:	2003e6b8 	.word	0x2003e6b8

000b4774 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4774:	2200      	movs	r2, #0
   b4776:	6840      	ldr	r0, [r0, #4]
   b4778:	4611      	mov	r1, r2
   b477a:	f7ff bfa3 	b.w	b46c4 <network_listening>

000b477e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b477e:	2200      	movs	r2, #0
   b4780:	6840      	ldr	r0, [r0, #4]
   b4782:	4611      	mov	r1, r2
   b4784:	f7ff bfae 	b.w	b46e4 <network_get_listen_timeout>

000b4788 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4788:	6840      	ldr	r0, [r0, #4]
   b478a:	2200      	movs	r2, #0
   b478c:	f7ff bfa2 	b.w	b46d4 <network_set_listen_timeout>

000b4790 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4790:	6840      	ldr	r0, [r0, #4]
   b4792:	2200      	movs	r2, #0
   b4794:	f081 0101 	eor.w	r1, r1, #1
   b4798:	f7ff bf8c 	b.w	b46b4 <network_listen>

000b479c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b479c:	2300      	movs	r3, #0
   b479e:	6840      	ldr	r0, [r0, #4]
   b47a0:	461a      	mov	r2, r3
   b47a2:	4619      	mov	r1, r3
   b47a4:	f7ff bf7e 	b.w	b46a4 <network_off>

000b47a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b47a8:	2300      	movs	r3, #0
   b47aa:	6840      	ldr	r0, [r0, #4]
   b47ac:	461a      	mov	r2, r3
   b47ae:	4619      	mov	r1, r3
   b47b0:	f7ff bf70 	b.w	b4694 <network_on>

000b47b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b47b4:	2200      	movs	r2, #0
   b47b6:	6840      	ldr	r0, [r0, #4]
   b47b8:	4611      	mov	r1, r2
   b47ba:	f7ff bf63 	b.w	b4684 <network_ready>

000b47be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b47be:	2200      	movs	r2, #0
   b47c0:	6840      	ldr	r0, [r0, #4]
   b47c2:	4611      	mov	r1, r2
   b47c4:	f7ff bf4e 	b.w	b4664 <network_connecting>

000b47c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b47c8:	6840      	ldr	r0, [r0, #4]
   b47ca:	2200      	movs	r2, #0
   b47cc:	2102      	movs	r1, #2
   b47ce:	f7ff bf51 	b.w	b4674 <network_disconnect>

000b47d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b47d2:	2300      	movs	r3, #0
   b47d4:	6840      	ldr	r0, [r0, #4]
   b47d6:	461a      	mov	r2, r3
   b47d8:	f7ff bf3c 	b.w	b4654 <network_connect>

000b47dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b47dc:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b47de:	2203      	movs	r2, #3
   b47e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b47e2:	4a02      	ldr	r2, [pc, #8]	; (b47ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b47e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b47e6:	4770      	bx	lr
   b47e8:	2003e6bc 	.word	0x2003e6bc
   b47ec:	000b52d8 	.word	0x000b52d8

000b47f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b47f0:	4770      	bx	lr

000b47f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b47f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47f4:	4606      	mov	r6, r0
   b47f6:	4615      	mov	r5, r2
   b47f8:	460c      	mov	r4, r1
   b47fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b47fc:	42bc      	cmp	r4, r7
   b47fe:	d006      	beq.n	b480e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4800:	6833      	ldr	r3, [r6, #0]
   b4802:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4806:	689b      	ldr	r3, [r3, #8]
   b4808:	4630      	mov	r0, r6
   b480a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b480c:	e7f6      	b.n	b47fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b480e:	4628      	mov	r0, r5
   b4810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4812 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4812:	7c00      	ldrb	r0, [r0, #16]
   b4814:	2200      	movs	r2, #0
   b4816:	f7ff be19 	b.w	b444c <hal_i2c_write>

000b481a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b481a:	7c00      	ldrb	r0, [r0, #16]
   b481c:	2100      	movs	r1, #0
   b481e:	f7ff be1d 	b.w	b445c <hal_i2c_available>

000b4822 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4822:	7c00      	ldrb	r0, [r0, #16]
   b4824:	2100      	movs	r1, #0
   b4826:	f7ff be21 	b.w	b446c <hal_i2c_read>

000b482a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b482a:	7c00      	ldrb	r0, [r0, #16]
   b482c:	2100      	movs	r1, #0
   b482e:	f7ff be25 	b.w	b447c <hal_i2c_peek>

000b4832 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4832:	7c00      	ldrb	r0, [r0, #16]
   b4834:	2100      	movs	r1, #0
   b4836:	f7ff be29 	b.w	b448c <hal_i2c_flush>

000b483a <_ZN7TwoWireD0Ev>:
   b483a:	b510      	push	{r4, lr}
   b483c:	2114      	movs	r1, #20
   b483e:	4604      	mov	r4, r0
   b4840:	f7ff fc33 	bl	b40aa <_ZdlPvj>
   b4844:	4620      	mov	r0, r4
   b4846:	bd10      	pop	{r4, pc}

000b4848 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4848:	b538      	push	{r3, r4, r5, lr}
   b484a:	4604      	mov	r4, r0
   b484c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b484e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4852:	2200      	movs	r2, #0
   b4854:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4858:	4b09      	ldr	r3, [pc, #36]	; (b4880 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b485a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b485c:	4608      	mov	r0, r1
   b485e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4860:	4629      	mov	r1, r5
   b4862:	f7ff fe23 	bl	b44ac <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4866:	30bf      	adds	r0, #191	; 0xbf
   b4868:	d108      	bne.n	b487c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b486a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b486c:	07db      	lsls	r3, r3, #31
   b486e:	d505      	bpl.n	b487c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4870:	6868      	ldr	r0, [r5, #4]
   b4872:	f7ff ff57 	bl	b4724 <free>
    free(conf.tx_buffer);
   b4876:	68e8      	ldr	r0, [r5, #12]
   b4878:	f7ff ff54 	bl	b4724 <free>
}
   b487c:	4620      	mov	r0, r4
   b487e:	bd38      	pop	{r3, r4, r5, pc}
   b4880:	000b5314 	.word	0x000b5314

000b4884 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4884:	4770      	bx	lr

000b4886 <_ZN9IPAddressD0Ev>:
   b4886:	b510      	push	{r4, lr}
   b4888:	2118      	movs	r1, #24
   b488a:	4604      	mov	r4, r0
   b488c:	f7ff fc0d 	bl	b40aa <_ZdlPvj>
   b4890:	4620      	mov	r0, r4
   b4892:	bd10      	pop	{r4, pc}

000b4894 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4894:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4896:	7d03      	ldrb	r3, [r0, #20]
   b4898:	2b06      	cmp	r3, #6
{
   b489a:	b08d      	sub	sp, #52	; 0x34
   b489c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b489e:	f100 0704 	add.w	r7, r0, #4
   b48a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b48a6:	d012      	beq.n	b48ce <_ZNK9IPAddress7printToER5Print+0x3a>
   b48a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b48ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b48b0:	220a      	movs	r2, #10
   b48b2:	4630      	mov	r0, r6
   b48b4:	f000 f943 	bl	b4b3e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b48b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b48ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b48bc:	d019      	beq.n	b48f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b48be:	2c00      	cmp	r4, #0
   b48c0:	d0f4      	beq.n	b48ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b48c2:	212e      	movs	r1, #46	; 0x2e
   b48c4:	4630      	mov	r0, r6
   b48c6:	f000 f937 	bl	b4b38 <_ZN5Print5printEc>
   b48ca:	4404      	add	r4, r0
   b48cc:	e7ee      	b.n	b48ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48ce:	232f      	movs	r3, #47	; 0x2f
   b48d0:	466a      	mov	r2, sp
   b48d2:	4639      	mov	r1, r7
   b48d4:	200a      	movs	r0, #10
		buf[0] = 0;
   b48d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48da:	f7ff fdef 	bl	b44bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b48de:	4668      	mov	r0, sp
   b48e0:	f7ff fb9c 	bl	b401c <strlen>
   b48e4:	6833      	ldr	r3, [r6, #0]
   b48e6:	4602      	mov	r2, r0
   b48e8:	68db      	ldr	r3, [r3, #12]
   b48ea:	4669      	mov	r1, sp
   b48ec:	4630      	mov	r0, r6
   b48ee:	4798      	blx	r3
   b48f0:	4604      	mov	r4, r0
    }
    return n;
}
   b48f2:	4620      	mov	r0, r4
   b48f4:	b00d      	add	sp, #52	; 0x34
   b48f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b48f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b48f8:	b510      	push	{r4, lr}
   b48fa:	4b05      	ldr	r3, [pc, #20]	; (b4910 <_ZN9IPAddressC1Ev+0x18>)
   b48fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b48fe:	2211      	movs	r2, #17
   b4900:	f840 3b04 	str.w	r3, [r0], #4
   b4904:	2100      	movs	r1, #0
   b4906:	f000 fc2f 	bl	b5168 <memset>
}
   b490a:	4620      	mov	r0, r4
   b490c:	bd10      	pop	{r4, pc}
   b490e:	bf00      	nop
   b4910:	000b533c 	.word	0x000b533c

000b4914 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4914:	4603      	mov	r3, r0
   b4916:	4a07      	ldr	r2, [pc, #28]	; (b4934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4918:	b510      	push	{r4, lr}
   b491a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b491e:	f101 0210 	add.w	r2, r1, #16
   b4922:	f851 4b04 	ldr.w	r4, [r1], #4
   b4926:	f843 4b04 	str.w	r4, [r3], #4
   b492a:	4291      	cmp	r1, r2
   b492c:	d1f9      	bne.n	b4922 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b492e:	780a      	ldrb	r2, [r1, #0]
   b4930:	701a      	strb	r2, [r3, #0]
}
   b4932:	bd10      	pop	{r4, pc}
   b4934:	000b533c 	.word	0x000b533c

000b4938 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4938:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b493a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b493e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4942:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4946:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b494a:	2304      	movs	r3, #4
   b494c:	6041      	str	r1, [r0, #4]
   b494e:	7503      	strb	r3, [r0, #20]
}
   b4950:	bd10      	pop	{r4, pc}
	...

000b4954 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4954:	b507      	push	{r0, r1, r2, lr}
   b4956:	4b06      	ldr	r3, [pc, #24]	; (b4970 <_ZN9IPAddressC1EPKh+0x1c>)
   b4958:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b495a:	78cb      	ldrb	r3, [r1, #3]
   b495c:	9300      	str	r3, [sp, #0]
   b495e:	788b      	ldrb	r3, [r1, #2]
   b4960:	784a      	ldrb	r2, [r1, #1]
   b4962:	7809      	ldrb	r1, [r1, #0]
   b4964:	f7ff ffe8 	bl	b4938 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4968:	b003      	add	sp, #12
   b496a:	f85d fb04 	ldr.w	pc, [sp], #4
   b496e:	bf00      	nop
   b4970:	000b533c 	.word	0x000b533c

000b4974 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4974:	4b01      	ldr	r3, [pc, #4]	; (b497c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4976:	4a02      	ldr	r2, [pc, #8]	; (b4980 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4978:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b497a:	4770      	bx	lr
   b497c:	2003e6c4 	.word	0x2003e6c4
   b4980:	000b5348 	.word	0x000b5348

000b4984 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4984:	2300      	movs	r3, #0
   b4986:	6840      	ldr	r0, [r0, #4]
   b4988:	461a      	mov	r2, r3
   b498a:	f7ff be63 	b.w	b4654 <network_connect>

000b498e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b498e:	6840      	ldr	r0, [r0, #4]
   b4990:	2200      	movs	r2, #0
   b4992:	2102      	movs	r1, #2
   b4994:	f7ff be6e 	b.w	b4674 <network_disconnect>

000b4998 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4998:	2200      	movs	r2, #0
   b499a:	6840      	ldr	r0, [r0, #4]
   b499c:	4611      	mov	r1, r2
   b499e:	f7ff be61 	b.w	b4664 <network_connecting>

000b49a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b49a2:	2200      	movs	r2, #0
   b49a4:	6840      	ldr	r0, [r0, #4]
   b49a6:	4611      	mov	r1, r2
   b49a8:	f7ff be6c 	b.w	b4684 <network_ready>

000b49ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b49ac:	2300      	movs	r3, #0
   b49ae:	6840      	ldr	r0, [r0, #4]
   b49b0:	461a      	mov	r2, r3
   b49b2:	4619      	mov	r1, r3
   b49b4:	f7ff be6e 	b.w	b4694 <network_on>

000b49b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b49b8:	2300      	movs	r3, #0
   b49ba:	6840      	ldr	r0, [r0, #4]
   b49bc:	461a      	mov	r2, r3
   b49be:	4619      	mov	r1, r3
   b49c0:	f7ff be70 	b.w	b46a4 <network_off>

000b49c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b49c4:	6840      	ldr	r0, [r0, #4]
   b49c6:	2100      	movs	r1, #0
   b49c8:	f7ff be94 	b.w	b46f4 <network_is_on>

000b49cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b49cc:	6840      	ldr	r0, [r0, #4]
   b49ce:	2100      	movs	r1, #0
   b49d0:	f7ff be98 	b.w	b4704 <network_is_off>

000b49d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b49d4:	6840      	ldr	r0, [r0, #4]
   b49d6:	2200      	movs	r2, #0
   b49d8:	f081 0101 	eor.w	r1, r1, #1
   b49dc:	f7ff be6a 	b.w	b46b4 <network_listen>

000b49e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b49e0:	6840      	ldr	r0, [r0, #4]
   b49e2:	2200      	movs	r2, #0
   b49e4:	f7ff be76 	b.w	b46d4 <network_set_listen_timeout>

000b49e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b49e8:	2200      	movs	r2, #0
   b49ea:	6840      	ldr	r0, [r0, #4]
   b49ec:	4611      	mov	r1, r2
   b49ee:	f7ff be79 	b.w	b46e4 <network_get_listen_timeout>

000b49f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b49f2:	2200      	movs	r2, #0
   b49f4:	6840      	ldr	r0, [r0, #4]
   b49f6:	4611      	mov	r1, r2
   b49f8:	f7ff be64 	b.w	b46c4 <network_listening>

000b49fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b49fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a00:	b095      	sub	sp, #84	; 0x54
   b4a02:	4614      	mov	r4, r2
   b4a04:	460d      	mov	r5, r1
   b4a06:	4607      	mov	r7, r0
    IPAddress addr;
   b4a08:	f7ff ff76 	bl	b48f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4a0c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4a0e:	221c      	movs	r2, #28
   b4a10:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4a12:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4a14:	f000 fba8 	bl	b5168 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4a18:	2340      	movs	r3, #64	; 0x40
   b4a1a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	466b      	mov	r3, sp
   b4a20:	aa0c      	add	r2, sp, #48	; 0x30
   b4a22:	2100      	movs	r1, #0
   b4a24:	f7ff fd5a 	bl	b44dc <netdb_getaddrinfo>
    if (!r) {
   b4a28:	4604      	mov	r4, r0
   b4a2a:	2800      	cmp	r0, #0
   b4a2c:	d14b      	bne.n	b4ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a2e:	4602      	mov	r2, r0
   b4a30:	2101      	movs	r1, #1
   b4a32:	6868      	ldr	r0, [r5, #4]
   b4a34:	f7ff fe26 	bl	b4684 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a38:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a3a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a3c:	4622      	mov	r2, r4
   b4a3e:	6868      	ldr	r0, [r5, #4]
   b4a40:	f7ff fe20 	bl	b4684 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a44:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a46:	4681      	mov	r9, r0
        bool ok = false;
   b4a48:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a4a:	2e00      	cmp	r6, #0
   b4a4c:	d03b      	beq.n	b4ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4a4e:	2900      	cmp	r1, #0
   b4a50:	d139      	bne.n	b4ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4a52:	6873      	ldr	r3, [r6, #4]
   b4a54:	2b02      	cmp	r3, #2
   b4a56:	d003      	beq.n	b4a60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4a58:	2b0a      	cmp	r3, #10
   b4a5a:	d011      	beq.n	b4a80 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a5c:	69f6      	ldr	r6, [r6, #28]
   b4a5e:	e7f4      	b.n	b4a4a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4a60:	f1b8 0f00 	cmp.w	r8, #0
   b4a64:	d0fa      	beq.n	b4a5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4a66:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4a68:	a806      	add	r0, sp, #24
   b4a6a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4a6c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4a6e:	f7ff ff71 	bl	b4954 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4a74:	1d3c      	adds	r4, r7, #4
   b4a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4a78:	682b      	ldr	r3, [r5, #0]
   b4a7a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4a7c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4a7e:	e7ed      	b.n	b4a5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4a80:	f1b9 0f00 	cmp.w	r9, #0
   b4a84:	d0ea      	beq.n	b4a5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4a86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4a88:	2210      	movs	r2, #16
   b4a8a:	a801      	add	r0, sp, #4
   b4a8c:	f000 fb6c 	bl	b5168 <memset>
                    a.v = 6;
   b4a90:	2306      	movs	r3, #6
   b4a92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4a96:	ad01      	add	r5, sp, #4
   b4a98:	f104 0308 	add.w	r3, r4, #8
   b4a9c:	3418      	adds	r4, #24
   b4a9e:	6818      	ldr	r0, [r3, #0]
   b4aa0:	6859      	ldr	r1, [r3, #4]
   b4aa2:	462a      	mov	r2, r5
   b4aa4:	c203      	stmia	r2!, {r0, r1}
   b4aa6:	3308      	adds	r3, #8
   b4aa8:	42a3      	cmp	r3, r4
   b4aaa:	4615      	mov	r5, r2
   b4aac:	d1f7      	bne.n	b4a9e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4aae:	a901      	add	r1, sp, #4
   b4ab0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ab2:	ad07      	add	r5, sp, #28
   b4ab4:	f7ff ff2e 	bl	b4914 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4aba:	1d3c      	adds	r4, r7, #4
   b4abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4abe:	682b      	ldr	r3, [r5, #0]
   b4ac0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ac2:	4649      	mov	r1, r9
   b4ac4:	e7ca      	b.n	b4a5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4ac6:	9800      	ldr	r0, [sp, #0]
   b4ac8:	f7ff fd00 	bl	b44cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4acc:	4638      	mov	r0, r7
   b4ace:	b015      	add	sp, #84	; 0x54
   b4ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4ad4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4ad4:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4ad6:	4a03      	ldr	r2, [pc, #12]	; (b4ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4ad8:	601a      	str	r2, [r3, #0]
   b4ada:	2200      	movs	r2, #0
   b4adc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b4ade:	4770      	bx	lr
   b4ae0:	2003e6c8 	.word	0x2003e6c8
   b4ae4:	000b5354 	.word	0x000b5354

000b4ae8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4aea:	4606      	mov	r6, r0
   b4aec:	460d      	mov	r5, r1
  size_t n = 0;
   b4aee:	188f      	adds	r7, r1, r2
   b4af0:	2400      	movs	r4, #0
  while (size--) {
   b4af2:	42bd      	cmp	r5, r7
   b4af4:	d00c      	beq.n	b4b10 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4af6:	6833      	ldr	r3, [r6, #0]
   b4af8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4afc:	689b      	ldr	r3, [r3, #8]
   b4afe:	4630      	mov	r0, r6
   b4b00:	4798      	blx	r3
     if (chunk>=0)
   b4b02:	1e03      	subs	r3, r0, #0
   b4b04:	db01      	blt.n	b4b0a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4b06:	441c      	add	r4, r3
  while (size--) {
   b4b08:	e7f3      	b.n	b4af2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4b0a:	2c00      	cmp	r4, #0
   b4b0c:	bf08      	it	eq
   b4b0e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4b10:	4620      	mov	r0, r4
   b4b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b14 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4b14:	b513      	push	{r0, r1, r4, lr}
   b4b16:	4604      	mov	r4, r0
    }
   b4b18:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4b1a:	b159      	cbz	r1, b4b34 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4b1c:	9101      	str	r1, [sp, #4]
   b4b1e:	f7ff fa7d 	bl	b401c <strlen>
   b4b22:	6823      	ldr	r3, [r4, #0]
   b4b24:	9901      	ldr	r1, [sp, #4]
   b4b26:	68db      	ldr	r3, [r3, #12]
   b4b28:	4602      	mov	r2, r0
   b4b2a:	4620      	mov	r0, r4
    }
   b4b2c:	b002      	add	sp, #8
   b4b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4b32:	4718      	bx	r3
    }
   b4b34:	b002      	add	sp, #8
   b4b36:	bd10      	pop	{r4, pc}

000b4b38 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4b38:	6803      	ldr	r3, [r0, #0]
   b4b3a:	689b      	ldr	r3, [r3, #8]
   b4b3c:	4718      	bx	r3

000b4b3e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4b3e:	b530      	push	{r4, r5, lr}
   b4b40:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4b42:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4b44:	2a01      	cmp	r2, #1
  *str = '\0';
   b4b46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4b4a:	bf98      	it	ls
   b4b4c:	220a      	movls	r2, #10
   b4b4e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4b50:	460d      	mov	r5, r1
   b4b52:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4b56:	fb01 5312 	mls	r3, r1, r2, r5
   b4b5a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4b5e:	2b09      	cmp	r3, #9
   b4b60:	bf94      	ite	ls
   b4b62:	3330      	addls	r3, #48	; 0x30
   b4b64:	3337      	addhi	r3, #55	; 0x37
   b4b66:	b2db      	uxtb	r3, r3
  } while(n);
   b4b68:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4b6a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4b6e:	d9ef      	bls.n	b4b50 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4b70:	4621      	mov	r1, r4
   b4b72:	f7ff ffcf 	bl	b4b14 <_ZN5Print5writeEPKc>
}
   b4b76:	b00b      	add	sp, #44	; 0x2c
   b4b78:	bd30      	pop	{r4, r5, pc}
	...

000b4b7c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4b7c:	4b01      	ldr	r3, [pc, #4]	; (b4b84 <_GLOBAL__sub_I_RGB+0x8>)
   b4b7e:	2200      	movs	r2, #0
   b4b80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4b82:	4770      	bx	lr
   b4b84:	2003e6d0 	.word	0x2003e6d0

000b4b88 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b88:	b510      	push	{r4, lr}
   b4b8a:	4604      	mov	r4, r0
   b4b8c:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b8e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b90:	f7ff fcac 	bl	b44ec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b94:	2300      	movs	r3, #0
   b4b96:	6063      	str	r3, [r4, #4]
}
   b4b98:	4620      	mov	r0, r4
   b4b9a:	bd10      	pop	{r4, pc}

000b4b9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b9c:	4b05      	ldr	r3, [pc, #20]	; (b4bb4 <_GLOBAL__sub_I_System+0x18>)
   b4b9e:	2202      	movs	r2, #2
   b4ba0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ba2:	4b05      	ldr	r3, [pc, #20]	; (b4bb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ba4:	4a05      	ldr	r2, [pc, #20]	; (b4bbc <_GLOBAL__sub_I_System+0x20>)
   b4ba6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ba8:	2000      	movs	r0, #0
   b4baa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bae:	f7ff bd25 	b.w	b45fc <set_system_mode>
   b4bb2:	bf00      	nop
   b4bb4:	2003e6ec 	.word	0x2003e6ec
   b4bb8:	2003e6e0 	.word	0x2003e6e0
   b4bbc:	ffff0000 	.word	0xffff0000

000b4bc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4bc0:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4bc2:	681a      	ldr	r2, [r3, #0]
   b4bc4:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4bc6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4bc8:	4770      	bx	lr
   b4bca:	bf00      	nop
   b4bcc:	2003e610 	.word	0x2003e610
   b4bd0:	2003e6f0 	.word	0x2003e6f0

000b4bd4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4bd4:	4770      	bx	lr

000b4bd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4bd6:	7441      	strb	r1, [r0, #17]
}
   b4bd8:	4770      	bx	lr

000b4bda <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4bda:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4bdc:	7c00      	ldrb	r0, [r0, #16]
   b4bde:	f7ff fcc5 	bl	b456c <hal_usart_available_data_for_write>
}
   b4be2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4be6:	bd08      	pop	{r3, pc}

000b4be8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4be8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4bea:	7c00      	ldrb	r0, [r0, #16]
   b4bec:	f7ff fc96 	bl	b451c <hal_usart_available>
}
   b4bf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bf4:	bd08      	pop	{r3, pc}

000b4bf6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4bf6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4bf8:	7c00      	ldrb	r0, [r0, #16]
   b4bfa:	f7ff fc9f 	bl	b453c <hal_usart_peek>
}
   b4bfe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c02:	bd08      	pop	{r3, pc}

000b4c04 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4c04:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4c06:	7c00      	ldrb	r0, [r0, #16]
   b4c08:	f7ff fc90 	bl	b452c <hal_usart_read>
}
   b4c0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c10:	bd08      	pop	{r3, pc}

000b4c12 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c12:	7c00      	ldrb	r0, [r0, #16]
   b4c14:	f7ff bc9a 	b.w	b454c <hal_usart_flush>

000b4c18 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c1a:	7c45      	ldrb	r5, [r0, #17]
{
   b4c1c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c1e:	b12d      	cbz	r5, b4c2c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c22:	b003      	add	sp, #12
   b4c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c28:	f7ff bc70 	b.w	b450c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c2c:	7c00      	ldrb	r0, [r0, #16]
   b4c2e:	9101      	str	r1, [sp, #4]
   b4c30:	f7ff fc9c 	bl	b456c <hal_usart_available_data_for_write>
   b4c34:	2800      	cmp	r0, #0
   b4c36:	9901      	ldr	r1, [sp, #4]
   b4c38:	dcf2      	bgt.n	b4c20 <_ZN11USARTSerial5writeEh+0x8>
}
   b4c3a:	4628      	mov	r0, r5
   b4c3c:	b003      	add	sp, #12
   b4c3e:	bd30      	pop	{r4, r5, pc}

000b4c40 <_ZN11USARTSerialD0Ev>:
   b4c40:	b510      	push	{r4, lr}
   b4c42:	2114      	movs	r1, #20
   b4c44:	4604      	mov	r4, r0
   b4c46:	f7ff fa30 	bl	b40aa <_ZdlPvj>
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	bd10      	pop	{r4, pc}
	...

000b4c50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4c50:	b510      	push	{r4, lr}
   b4c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c56:	4604      	mov	r4, r0
   b4c58:	4608      	mov	r0, r1
   b4c5a:	4611      	mov	r1, r2
   b4c5c:	2200      	movs	r2, #0
   b4c5e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4c62:	4b04      	ldr	r3, [pc, #16]	; (b4c74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4c64:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c66:	2301      	movs	r3, #1
  _serial = serial;
   b4c68:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c6a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4c6c:	f7ff fc86 	bl	b457c <hal_usart_init_ex>
}
   b4c70:	4620      	mov	r0, r4
   b4c72:	bd10      	pop	{r4, pc}
   b4c74:	000b53ac 	.word	0x000b53ac

000b4c78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c78:	7441      	strb	r1, [r0, #17]
}
   b4c7a:	4770      	bx	lr

000b4c7c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c7c:	4770      	bx	lr

000b4c7e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4c7e:	4770      	bx	lr

000b4c80 <_ZN9USBSerial4readEv>:
{
   b4c80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4c82:	2100      	movs	r1, #0
   b4c84:	7c00      	ldrb	r0, [r0, #16]
   b4c86:	f7ff fca1 	bl	b45cc <HAL_USB_USART_Receive_Data>
}
   b4c8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c8e:	bd08      	pop	{r3, pc}

000b4c90 <_ZN9USBSerial4peekEv>:
{
   b4c90:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4c92:	2101      	movs	r1, #1
   b4c94:	7c00      	ldrb	r0, [r0, #16]
   b4c96:	f7ff fc99 	bl	b45cc <HAL_USB_USART_Receive_Data>
}
   b4c9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c9e:	bd08      	pop	{r3, pc}

000b4ca0 <_ZN9USBSerial17availableForWriteEv>:
{
   b4ca0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4ca2:	7c00      	ldrb	r0, [r0, #16]
   b4ca4:	f7ff fc8a 	bl	b45bc <HAL_USB_USART_Available_Data_For_Write>
}
   b4ca8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cac:	bd08      	pop	{r3, pc}

000b4cae <_ZN9USBSerial9availableEv>:
{
   b4cae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4cb0:	7c00      	ldrb	r0, [r0, #16]
   b4cb2:	f7ff fc7b 	bl	b45ac <HAL_USB_USART_Available_Data>
}
   b4cb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cba:	bd08      	pop	{r3, pc}

000b4cbc <_ZN9USBSerial5writeEh>:
{
   b4cbc:	b513      	push	{r0, r1, r4, lr}
   b4cbe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cc0:	7c00      	ldrb	r0, [r0, #16]
{
   b4cc2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cc4:	f7ff fc7a 	bl	b45bc <HAL_USB_USART_Available_Data_For_Write>
   b4cc8:	2800      	cmp	r0, #0
   b4cca:	9901      	ldr	r1, [sp, #4]
   b4ccc:	dc01      	bgt.n	b4cd2 <_ZN9USBSerial5writeEh+0x16>
   b4cce:	7c60      	ldrb	r0, [r4, #17]
   b4cd0:	b120      	cbz	r0, b4cdc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4cd2:	7c20      	ldrb	r0, [r4, #16]
   b4cd4:	f7ff fc82 	bl	b45dc <HAL_USB_USART_Send_Data>
   b4cd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4cdc:	b002      	add	sp, #8
   b4cde:	bd10      	pop	{r4, pc}

000b4ce0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4ce0:	7c00      	ldrb	r0, [r0, #16]
   b4ce2:	f7ff bc83 	b.w	b45ec <HAL_USB_USART_Flush_Data>

000b4ce6 <_ZN9USBSerialD0Ev>:
   b4ce6:	b510      	push	{r4, lr}
   b4ce8:	2114      	movs	r1, #20
   b4cea:	4604      	mov	r4, r0
   b4cec:	f7ff f9dd 	bl	b40aa <_ZdlPvj>
   b4cf0:	4620      	mov	r0, r4
   b4cf2:	bd10      	pop	{r4, pc}

000b4cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4cf4:	b510      	push	{r4, lr}
   b4cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	4608      	mov	r0, r1
   b4cfe:	2100      	movs	r1, #0
   b4d00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d04:	4b04      	ldr	r3, [pc, #16]	; (b4d18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4d06:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d08:	2301      	movs	r3, #1
  _serial = serial;
   b4d0a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d0c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4d0e:	4611      	mov	r1, r2
   b4d10:	f7ff fc3c 	bl	b458c <HAL_USB_USART_Init>
}
   b4d14:	4620      	mov	r0, r4
   b4d16:	bd10      	pop	{r4, pc}
   b4d18:	000b53dc 	.word	0x000b53dc

000b4d1c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4d1c:	7c00      	ldrb	r0, [r0, #16]
   b4d1e:	2200      	movs	r2, #0
   b4d20:	f7ff bc3c 	b.w	b459c <HAL_USB_USART_Begin>

000b4d24 <_Z19acquireSerialBufferv>:
{
   b4d24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4d26:	2214      	movs	r2, #20
{
   b4d28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4d2a:	2100      	movs	r1, #0
   b4d2c:	f000 fa1c 	bl	b5168 <memset>
}
   b4d30:	4620      	mov	r0, r4
   b4d32:	bd10      	pop	{r4, pc}

000b4d34 <_Z16_fetch_usbserialv>:
{
   b4d34:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d36:	4c0f      	ldr	r4, [pc, #60]	; (b4d74 <_Z16_fetch_usbserialv+0x40>)
{
   b4d38:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4d3a:	a803      	add	r0, sp, #12
   b4d3c:	f7ff fff2 	bl	b4d24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d40:	7821      	ldrb	r1, [r4, #0]
   b4d42:	f3bf 8f5b 	dmb	ish
   b4d46:	f011 0101 	ands.w	r1, r1, #1
   b4d4a:	d10f      	bne.n	b4d6c <_Z16_fetch_usbserialv+0x38>
   b4d4c:	4620      	mov	r0, r4
   b4d4e:	9101      	str	r1, [sp, #4]
   b4d50:	f7ff f9ad 	bl	b40ae <__cxa_guard_acquire>
   b4d54:	9901      	ldr	r1, [sp, #4]
   b4d56:	b148      	cbz	r0, b4d6c <_Z16_fetch_usbserialv+0x38>
   b4d58:	aa03      	add	r2, sp, #12
   b4d5a:	4807      	ldr	r0, [pc, #28]	; (b4d78 <_Z16_fetch_usbserialv+0x44>)
   b4d5c:	f7ff ffca 	bl	b4cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4d60:	4620      	mov	r0, r4
   b4d62:	f7ff f9a9 	bl	b40b8 <__cxa_guard_release>
   b4d66:	4805      	ldr	r0, [pc, #20]	; (b4d7c <_Z16_fetch_usbserialv+0x48>)
   b4d68:	f000 f9ea 	bl	b5140 <atexit>
	return _usbserial;
}
   b4d6c:	4802      	ldr	r0, [pc, #8]	; (b4d78 <_Z16_fetch_usbserialv+0x44>)
   b4d6e:	b008      	add	sp, #32
   b4d70:	bd10      	pop	{r4, pc}
   b4d72:	bf00      	nop
   b4d74:	2003e6f4 	.word	0x2003e6f4
   b4d78:	2003e6f8 	.word	0x2003e6f8
   b4d7c:	000b4c7d 	.word	0x000b4c7d

000b4d80 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4d80:	2200      	movs	r2, #0
   b4d82:	6840      	ldr	r0, [r0, #4]
   b4d84:	4611      	mov	r1, r2
   b4d86:	f7ff bc7d 	b.w	b4684 <network_ready>

000b4d8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d8a:	2200      	movs	r2, #0
   b4d8c:	6840      	ldr	r0, [r0, #4]
   b4d8e:	4611      	mov	r1, r2
   b4d90:	f7ff bc98 	b.w	b46c4 <network_listening>

000b4d94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d94:	2200      	movs	r2, #0
   b4d96:	6840      	ldr	r0, [r0, #4]
   b4d98:	4611      	mov	r1, r2
   b4d9a:	f7ff bca3 	b.w	b46e4 <network_get_listen_timeout>

000b4d9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d9e:	6840      	ldr	r0, [r0, #4]
   b4da0:	2200      	movs	r2, #0
   b4da2:	f7ff bc97 	b.w	b46d4 <network_set_listen_timeout>

000b4da6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4da6:	6840      	ldr	r0, [r0, #4]
   b4da8:	2200      	movs	r2, #0
   b4daa:	f081 0101 	eor.w	r1, r1, #1
   b4dae:	f7ff bc81 	b.w	b46b4 <network_listen>

000b4db2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4db2:	2300      	movs	r3, #0
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	461a      	mov	r2, r3
   b4db8:	4619      	mov	r1, r3
   b4dba:	f7ff bc73 	b.w	b46a4 <network_off>

000b4dbe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4dbe:	2300      	movs	r3, #0
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	461a      	mov	r2, r3
   b4dc4:	4619      	mov	r1, r3
   b4dc6:	f7ff bc65 	b.w	b4694 <network_on>

000b4dca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dca:	2200      	movs	r2, #0
   b4dcc:	6840      	ldr	r0, [r0, #4]
   b4dce:	4611      	mov	r1, r2
   b4dd0:	f7ff bc48 	b.w	b4664 <network_connecting>

000b4dd4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dd4:	6840      	ldr	r0, [r0, #4]
   b4dd6:	2200      	movs	r2, #0
   b4dd8:	2102      	movs	r1, #2
   b4dda:	f7ff bc4b 	b.w	b4674 <network_disconnect>

000b4dde <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dde:	2300      	movs	r3, #0
   b4de0:	6840      	ldr	r0, [r0, #4]
   b4de2:	461a      	mov	r2, r3
   b4de4:	f7ff bc36 	b.w	b4654 <network_connect>

000b4de8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4de8:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4dea:	2204      	movs	r2, #4
   b4dec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4dee:	4a02      	ldr	r2, [pc, #8]	; (b4df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4df0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4df2:	4770      	bx	lr
   b4df4:	2003e70c 	.word	0x2003e70c
   b4df8:	000b540c 	.word	0x000b540c

000b4dfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4dfc:	4b01      	ldr	r3, [pc, #4]	; (b4e04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4dfe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4e00:	4770      	bx	lr
   b4e02:	bf00      	nop
   b4e04:	2003e614 	.word	0x2003e614

000b4e08 <serialEventRun>:
{
   b4e08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4e0a:	4b0b      	ldr	r3, [pc, #44]	; (b4e38 <serialEventRun+0x30>)
   b4e0c:	b143      	cbz	r3, b4e20 <serialEventRun+0x18>
   b4e0e:	f7ff ff91 	bl	b4d34 <_Z16_fetch_usbserialv>
   b4e12:	6803      	ldr	r3, [r0, #0]
   b4e14:	691b      	ldr	r3, [r3, #16]
   b4e16:	4798      	blx	r3
   b4e18:	2800      	cmp	r0, #0
   b4e1a:	dd01      	ble.n	b4e20 <serialEventRun+0x18>
        serialEvent();
   b4e1c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4e20:	4b06      	ldr	r3, [pc, #24]	; (b4e3c <serialEventRun+0x34>)
   b4e22:	b143      	cbz	r3, b4e36 <serialEventRun+0x2e>
   b4e24:	f000 f960 	bl	b50e8 <_Z22__fetch_global_Serial1v>
   b4e28:	6803      	ldr	r3, [r0, #0]
   b4e2a:	691b      	ldr	r3, [r3, #16]
   b4e2c:	4798      	blx	r3
   b4e2e:	2800      	cmp	r0, #0
   b4e30:	dd01      	ble.n	b4e36 <serialEventRun+0x2e>
        serialEvent1();
   b4e32:	f3af 8000 	nop.w
}
   b4e36:	bd08      	pop	{r3, pc}
	...

000b4e40 <_post_loop>:
{
   b4e40:	b508      	push	{r3, lr}
	serialEventRun();
   b4e42:	f7ff ffe1 	bl	b4e08 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4e46:	f7ff fad1 	bl	b43ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4e4a:	4b01      	ldr	r3, [pc, #4]	; (b4e50 <_post_loop+0x10>)
   b4e4c:	6018      	str	r0, [r3, #0]
}
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	2003e728 	.word	0x2003e728

000b4e54 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e54:	4805      	ldr	r0, [pc, #20]	; (b4e6c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4e56:	4a06      	ldr	r2, [pc, #24]	; (b4e70 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4e58:	4906      	ldr	r1, [pc, #24]	; (b4e74 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4e5a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e5c:	1a12      	subs	r2, r2, r0
   b4e5e:	f000 f975 	bl	b514c <memcpy>
    __backup_sram_signature = signature;
   b4e62:	4b05      	ldr	r3, [pc, #20]	; (b4e78 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4e64:	4a05      	ldr	r2, [pc, #20]	; (b4e7c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4e66:	601a      	str	r2, [r3, #0]
}
   b4e68:	bd08      	pop	{r3, pc}
   b4e6a:	bf00      	nop
   b4e6c:	2003f400 	.word	0x2003f400
   b4e70:	2003f404 	.word	0x2003f404
   b4e74:	000b5574 	.word	0x000b5574
   b4e78:	2003f400 	.word	0x2003f400
   b4e7c:	9a271c1e 	.word	0x9a271c1e

000b4e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4e80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e82:	2300      	movs	r3, #0
   b4e84:	9300      	str	r3, [sp, #0]
   b4e86:	461a      	mov	r2, r3
   b4e88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e8c:	f7ff fbd0 	bl	b4630 <system_ctrl_set_result>
}
   b4e90:	b003      	add	sp, #12
   b4e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4e98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4e98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4e9a:	8843      	ldrh	r3, [r0, #2]
   b4e9c:	2b0a      	cmp	r3, #10
   b4e9e:	d008      	beq.n	b4eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4ea0:	2b50      	cmp	r3, #80	; 0x50
   b4ea2:	d10b      	bne.n	b4ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4ea4:	4b09      	ldr	r3, [pc, #36]	; (b4ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4ea6:	681b      	ldr	r3, [r3, #0]
   b4ea8:	b14b      	cbz	r3, b4ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4eaa:	b003      	add	sp, #12
   b4eac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4eb0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4eb2:	f7ff ffe5 	bl	b4e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4eb6:	b003      	add	sp, #12
   b4eb8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4ebc:	2300      	movs	r3, #0
   b4ebe:	9300      	str	r3, [sp, #0]
   b4ec0:	461a      	mov	r2, r3
   b4ec2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4ec6:	f7ff fbb3 	bl	b4630 <system_ctrl_set_result>
}
   b4eca:	e7f4      	b.n	b4eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4ecc:	2003e718 	.word	0x2003e718

000b4ed0 <module_user_init_hook>:
{
   b4ed0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4ed2:	4812      	ldr	r0, [pc, #72]	; (b4f1c <module_user_init_hook+0x4c>)
   b4ed4:	2100      	movs	r1, #0
   b4ed6:	f7ff fc3d 	bl	b4754 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4eda:	4b11      	ldr	r3, [pc, #68]	; (b4f20 <module_user_init_hook+0x50>)
   b4edc:	681a      	ldr	r2, [r3, #0]
   b4ede:	4b11      	ldr	r3, [pc, #68]	; (b4f24 <module_user_init_hook+0x54>)
   b4ee0:	429a      	cmp	r2, r3
   b4ee2:	4b11      	ldr	r3, [pc, #68]	; (b4f28 <module_user_init_hook+0x58>)
   b4ee4:	bf0c      	ite	eq
   b4ee6:	2201      	moveq	r2, #1
   b4ee8:	2200      	movne	r2, #0
   b4eea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4eec:	d001      	beq.n	b4ef2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4eee:	f7ff ffb1 	bl	b4e54 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4ef2:	f7ff fa73 	bl	b43dc <HAL_RNG_GetRandomNumber>
   b4ef6:	4604      	mov	r4, r0
    srand(seed);
   b4ef8:	f000 f93e 	bl	b5178 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4efc:	4b0b      	ldr	r3, [pc, #44]	; (b4f2c <module_user_init_hook+0x5c>)
   b4efe:	b113      	cbz	r3, b4f06 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4f00:	4620      	mov	r0, r4
   b4f02:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4f06:	2100      	movs	r1, #0
   b4f08:	4808      	ldr	r0, [pc, #32]	; (b4f2c <module_user_init_hook+0x5c>)
   b4f0a:	f7ff fb9b 	bl	b4644 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4f12:	4807      	ldr	r0, [pc, #28]	; (b4f30 <module_user_init_hook+0x60>)
   b4f14:	2100      	movs	r1, #0
   b4f16:	f7ff bb81 	b.w	b461c <system_ctrl_set_app_request_handler>
   b4f1a:	bf00      	nop
   b4f1c:	000b4dfd 	.word	0x000b4dfd
   b4f20:	2003f400 	.word	0x2003f400
   b4f24:	9a271c1e 	.word	0x9a271c1e
   b4f28:	2003e714 	.word	0x2003e714
   b4f2c:	00000000 	.word	0x00000000
   b4f30:	000b4e99 	.word	0x000b4e99

000b4f34 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4f34:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4f36:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4f38:	d902      	bls.n	b4f40 <pinAvailable+0xc>
    return false;
   b4f3a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4f3c:	b002      	add	sp, #8
   b4f3e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4f40:	f1a0 030b 	sub.w	r3, r0, #11
   b4f44:	2b02      	cmp	r3, #2
   b4f46:	d81a      	bhi.n	b4f7e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f48:	4c17      	ldr	r4, [pc, #92]	; (b4fa8 <pinAvailable+0x74>)
   b4f4a:	7821      	ldrb	r1, [r4, #0]
   b4f4c:	f3bf 8f5b 	dmb	ish
   b4f50:	f011 0101 	ands.w	r1, r1, #1
   b4f54:	d10b      	bne.n	b4f6e <pinAvailable+0x3a>
   b4f56:	4620      	mov	r0, r4
   b4f58:	9101      	str	r1, [sp, #4]
   b4f5a:	f7ff f8a8 	bl	b40ae <__cxa_guard_acquire>
   b4f5e:	9901      	ldr	r1, [sp, #4]
   b4f60:	b128      	cbz	r0, b4f6e <pinAvailable+0x3a>
   b4f62:	4812      	ldr	r0, [pc, #72]	; (b4fac <pinAvailable+0x78>)
   b4f64:	f7ff fe10 	bl	b4b88 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f68:	4620      	mov	r0, r4
   b4f6a:	f7ff f8a5 	bl	b40b8 <__cxa_guard_release>
   b4f6e:	4b0f      	ldr	r3, [pc, #60]	; (b4fac <pinAvailable+0x78>)
   b4f70:	7818      	ldrb	r0, [r3, #0]
   b4f72:	f7ff fac3 	bl	b44fc <hal_spi_is_enabled>
   b4f76:	2800      	cmp	r0, #0
   b4f78:	d1df      	bne.n	b4f3a <pinAvailable+0x6>
  return true; // 'pin' is available
   b4f7a:	2001      	movs	r0, #1
   b4f7c:	e7de      	b.n	b4f3c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4f7e:	2801      	cmp	r0, #1
   b4f80:	d809      	bhi.n	b4f96 <pinAvailable+0x62>
   b4f82:	f000 f871 	bl	b5068 <_Z19__fetch_global_Wirev>
   b4f86:	2100      	movs	r1, #0
   b4f88:	7c00      	ldrb	r0, [r0, #16]
   b4f8a:	f7ff fa87 	bl	b449c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4f8e:	f080 0001 	eor.w	r0, r0, #1
   b4f92:	b2c0      	uxtb	r0, r0
   b4f94:	e7d2      	b.n	b4f3c <pinAvailable+0x8>
   b4f96:	3809      	subs	r0, #9
   b4f98:	2801      	cmp	r0, #1
   b4f9a:	d8ee      	bhi.n	b4f7a <pinAvailable+0x46>
   b4f9c:	f000 f8a4 	bl	b50e8 <_Z22__fetch_global_Serial1v>
   b4fa0:	7c00      	ldrb	r0, [r0, #16]
   b4fa2:	f7ff fadb 	bl	b455c <hal_usart_is_enabled>
   b4fa6:	e7f2      	b.n	b4f8e <pinAvailable+0x5a>
   b4fa8:	2003e71c 	.word	0x2003e71c
   b4fac:	2003e720 	.word	0x2003e720

000b4fb0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fb0:	2823      	cmp	r0, #35	; 0x23
{
   b4fb2:	b538      	push	{r3, r4, r5, lr}
   b4fb4:	4604      	mov	r4, r0
   b4fb6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fb8:	d80a      	bhi.n	b4fd0 <pinMode+0x20>
   b4fba:	29ff      	cmp	r1, #255	; 0xff
   b4fbc:	d008      	beq.n	b4fd0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4fbe:	f7ff ffb9 	bl	b4f34 <pinAvailable>
   b4fc2:	b128      	cbz	r0, b4fd0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b4fc4:	4629      	mov	r1, r5
   b4fc6:	4620      	mov	r0, r4
}
   b4fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b4fcc:	f7ff ba1e 	b.w	b440c <hal_gpio_mode>
}
   b4fd0:	bd38      	pop	{r3, r4, r5, pc}

000b4fd2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b4fd2:	b538      	push	{r3, r4, r5, lr}
   b4fd4:	4604      	mov	r4, r0
   b4fd6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b4fd8:	f7ff fa20 	bl	b441c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b4fdc:	28ff      	cmp	r0, #255	; 0xff
   b4fde:	d010      	beq.n	b5002 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b4fe0:	2806      	cmp	r0, #6
   b4fe2:	d804      	bhi.n	b4fee <digitalWrite+0x1c>
   b4fe4:	234d      	movs	r3, #77	; 0x4d
   b4fe6:	fa23 f000 	lsr.w	r0, r3, r0
   b4fea:	07c3      	lsls	r3, r0, #31
   b4fec:	d409      	bmi.n	b5002 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b4fee:	4620      	mov	r0, r4
   b4ff0:	f7ff ffa0 	bl	b4f34 <pinAvailable>
   b4ff4:	b128      	cbz	r0, b5002 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b4ff6:	4629      	mov	r1, r5
   b4ff8:	4620      	mov	r0, r4
}
   b4ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b4ffe:	f7ff ba15 	b.w	b442c <hal_gpio_write>
}
   b5002:	bd38      	pop	{r3, r4, r5, pc}

000b5004 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5004:	280d      	cmp	r0, #13
{
   b5006:	b510      	push	{r4, lr}
   b5008:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b500a:	bf9c      	itt	ls
   b500c:	340e      	addls	r4, #14
   b500e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b5010:	4620      	mov	r0, r4
   b5012:	f7ff ff8f 	bl	b4f34 <pinAvailable>
   b5016:	b150      	cbz	r0, b502e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b5018:	2103      	movs	r1, #3
   b501a:	4620      	mov	r0, r4
   b501c:	f7ff f9ee 	bl	b43fc <hal_pin_validate_function>
   b5020:	2803      	cmp	r0, #3
   b5022:	d104      	bne.n	b502e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5024:	4620      	mov	r0, r4
}
   b5026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b502a:	f7ff ba07 	b.w	b443c <hal_adc_read>
}
   b502e:	2000      	movs	r0, #0
   b5030:	bd10      	pop	{r4, pc}

000b5032 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5032:	4770      	bx	lr

000b5034 <_Z17acquireWireBufferv>:
{
   b5034:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5036:	4b0a      	ldr	r3, [pc, #40]	; (b5060 <_Z17acquireWireBufferv+0x2c>)
   b5038:	6003      	str	r3, [r0, #0]
   b503a:	2301      	movs	r3, #1
{
   b503c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b503e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5040:	4908      	ldr	r1, [pc, #32]	; (b5064 <_Z17acquireWireBufferv+0x30>)
   b5042:	2020      	movs	r0, #32
   b5044:	f000 f874 	bl	b5130 <_ZnajRKSt9nothrow_t>
	};
   b5048:	2520      	movs	r5, #32
   b504a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b504c:	4905      	ldr	r1, [pc, #20]	; (b5064 <_Z17acquireWireBufferv+0x30>)
	};
   b504e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5050:	4628      	mov	r0, r5
   b5052:	f000 f86d 	bl	b5130 <_ZnajRKSt9nothrow_t>
	};
   b5056:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b505a:	4620      	mov	r0, r4
   b505c:	bd38      	pop	{r3, r4, r5, pc}
   b505e:	bf00      	nop
   b5060:	00010018 	.word	0x00010018
   b5064:	000b5440 	.word	0x000b5440

000b5068 <_Z19__fetch_global_Wirev>:
{
   b5068:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b506a:	4d0e      	ldr	r5, [pc, #56]	; (b50a4 <_Z19__fetch_global_Wirev+0x3c>)
   b506c:	7829      	ldrb	r1, [r5, #0]
   b506e:	f3bf 8f5b 	dmb	ish
   b5072:	f011 0401 	ands.w	r4, r1, #1
{
   b5076:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5078:	d111      	bne.n	b509e <_Z19__fetch_global_Wirev+0x36>
   b507a:	4628      	mov	r0, r5
   b507c:	f7ff f817 	bl	b40ae <__cxa_guard_acquire>
   b5080:	b168      	cbz	r0, b509e <_Z19__fetch_global_Wirev+0x36>
   b5082:	4668      	mov	r0, sp
   b5084:	f7ff ffd6 	bl	b5034 <_Z17acquireWireBufferv>
   b5088:	466a      	mov	r2, sp
   b508a:	4621      	mov	r1, r4
   b508c:	4806      	ldr	r0, [pc, #24]	; (b50a8 <_Z19__fetch_global_Wirev+0x40>)
   b508e:	f7ff fbdb 	bl	b4848 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5092:	4628      	mov	r0, r5
   b5094:	f7ff f810 	bl	b40b8 <__cxa_guard_release>
   b5098:	4804      	ldr	r0, [pc, #16]	; (b50ac <_Z19__fetch_global_Wirev+0x44>)
   b509a:	f000 f851 	bl	b5140 <atexit>
	return wire;
}
   b509e:	4802      	ldr	r0, [pc, #8]	; (b50a8 <_Z19__fetch_global_Wirev+0x40>)
   b50a0:	b007      	add	sp, #28
   b50a2:	bd30      	pop	{r4, r5, pc}
   b50a4:	2003e72c 	.word	0x2003e72c
   b50a8:	2003e730 	.word	0x2003e730
   b50ac:	000b5033 	.word	0x000b5033

000b50b0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50b0:	4770      	bx	lr
	...

000b50b4 <_Z20acquireSerial1Bufferv>:
{
   b50b4:	b538      	push	{r3, r4, r5, lr}
   b50b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b50b8:	2514      	movs	r5, #20
   b50ba:	462a      	mov	r2, r5
   b50bc:	2100      	movs	r1, #0
   b50be:	f000 f853 	bl	b5168 <memset>
   b50c2:	8025      	strh	r5, [r4, #0]
   b50c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50c6:	4907      	ldr	r1, [pc, #28]	; (b50e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b50c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b50cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ce:	f000 f82f 	bl	b5130 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50d2:	4904      	ldr	r1, [pc, #16]	; (b50e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b50d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50d6:	4628      	mov	r0, r5
   b50d8:	f000 f82a 	bl	b5130 <_ZnajRKSt9nothrow_t>
    };
   b50dc:	60e0      	str	r0, [r4, #12]
}
   b50de:	4620      	mov	r0, r4
   b50e0:	bd38      	pop	{r3, r4, r5, pc}
   b50e2:	bf00      	nop
   b50e4:	000b5440 	.word	0x000b5440

000b50e8 <_Z22__fetch_global_Serial1v>:
{
   b50e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50ea:	4d0e      	ldr	r5, [pc, #56]	; (b5124 <_Z22__fetch_global_Serial1v+0x3c>)
   b50ec:	7829      	ldrb	r1, [r5, #0]
   b50ee:	f3bf 8f5b 	dmb	ish
   b50f2:	f011 0401 	ands.w	r4, r1, #1
{
   b50f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50f8:	d111      	bne.n	b511e <_Z22__fetch_global_Serial1v+0x36>
   b50fa:	4628      	mov	r0, r5
   b50fc:	f7fe ffd7 	bl	b40ae <__cxa_guard_acquire>
   b5100:	b168      	cbz	r0, b511e <_Z22__fetch_global_Serial1v+0x36>
   b5102:	a801      	add	r0, sp, #4
   b5104:	f7ff ffd6 	bl	b50b4 <_Z20acquireSerial1Bufferv>
   b5108:	aa01      	add	r2, sp, #4
   b510a:	4621      	mov	r1, r4
   b510c:	4806      	ldr	r0, [pc, #24]	; (b5128 <_Z22__fetch_global_Serial1v+0x40>)
   b510e:	f7ff fd9f 	bl	b4c50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5112:	4628      	mov	r0, r5
   b5114:	f7fe ffd0 	bl	b40b8 <__cxa_guard_release>
   b5118:	4804      	ldr	r0, [pc, #16]	; (b512c <_Z22__fetch_global_Serial1v+0x44>)
   b511a:	f000 f811 	bl	b5140 <atexit>
    return serial1;
}
   b511e:	4802      	ldr	r0, [pc, #8]	; (b5128 <_Z22__fetch_global_Serial1v+0x40>)
   b5120:	b007      	add	sp, #28
   b5122:	bd30      	pop	{r4, r5, pc}
   b5124:	2003e744 	.word	0x2003e744
   b5128:	2003e748 	.word	0x2003e748
   b512c:	000b50b1 	.word	0x000b50b1

000b5130 <_ZnajRKSt9nothrow_t>:
   b5130:	f7fe bfb9 	b.w	b40a6 <_Znaj>

000b5134 <_ZSt20__throw_length_errorPKc>:
   b5134:	b508      	push	{r3, lr}
   b5136:	f7ff fafd 	bl	b4734 <abort>

000b513a <_ZSt25__throw_bad_function_callv>:
   b513a:	b508      	push	{r3, lr}
   b513c:	f7ff fafa 	bl	b4734 <abort>

000b5140 <atexit>:
   b5140:	2300      	movs	r3, #0
   b5142:	4601      	mov	r1, r0
   b5144:	461a      	mov	r2, r3
   b5146:	4618      	mov	r0, r3
   b5148:	f000 b844 	b.w	b51d4 <__register_exitproc>

000b514c <memcpy>:
   b514c:	440a      	add	r2, r1
   b514e:	4291      	cmp	r1, r2
   b5150:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5154:	d100      	bne.n	b5158 <memcpy+0xc>
   b5156:	4770      	bx	lr
   b5158:	b510      	push	{r4, lr}
   b515a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b515e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5162:	4291      	cmp	r1, r2
   b5164:	d1f9      	bne.n	b515a <memcpy+0xe>
   b5166:	bd10      	pop	{r4, pc}

000b5168 <memset>:
   b5168:	4402      	add	r2, r0
   b516a:	4603      	mov	r3, r0
   b516c:	4293      	cmp	r3, r2
   b516e:	d100      	bne.n	b5172 <memset+0xa>
   b5170:	4770      	bx	lr
   b5172:	f803 1b01 	strb.w	r1, [r3], #1
   b5176:	e7f9      	b.n	b516c <memset+0x4>

000b5178 <srand>:
   b5178:	b538      	push	{r3, r4, r5, lr}
   b517a:	4b10      	ldr	r3, [pc, #64]	; (b51bc <srand+0x44>)
   b517c:	681d      	ldr	r5, [r3, #0]
   b517e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5180:	4604      	mov	r4, r0
   b5182:	b9b3      	cbnz	r3, b51b2 <srand+0x3a>
   b5184:	2018      	movs	r0, #24
   b5186:	f7ff fac5 	bl	b4714 <malloc>
   b518a:	4602      	mov	r2, r0
   b518c:	63a8      	str	r0, [r5, #56]	; 0x38
   b518e:	b920      	cbnz	r0, b519a <srand+0x22>
   b5190:	4b0b      	ldr	r3, [pc, #44]	; (b51c0 <srand+0x48>)
   b5192:	480c      	ldr	r0, [pc, #48]	; (b51c4 <srand+0x4c>)
   b5194:	2142      	movs	r1, #66	; 0x42
   b5196:	f7ff fad5 	bl	b4744 <__assert_func>
   b519a:	490b      	ldr	r1, [pc, #44]	; (b51c8 <srand+0x50>)
   b519c:	4b0b      	ldr	r3, [pc, #44]	; (b51cc <srand+0x54>)
   b519e:	e9c0 1300 	strd	r1, r3, [r0]
   b51a2:	4b0b      	ldr	r3, [pc, #44]	; (b51d0 <srand+0x58>)
   b51a4:	6083      	str	r3, [r0, #8]
   b51a6:	230b      	movs	r3, #11
   b51a8:	8183      	strh	r3, [r0, #12]
   b51aa:	2100      	movs	r1, #0
   b51ac:	2001      	movs	r0, #1
   b51ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b51b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b51b4:	2200      	movs	r2, #0
   b51b6:	611c      	str	r4, [r3, #16]
   b51b8:	615a      	str	r2, [r3, #20]
   b51ba:	bd38      	pop	{r3, r4, r5, pc}
   b51bc:	2003e614 	.word	0x2003e614
   b51c0:	000b5441 	.word	0x000b5441
   b51c4:	000b5458 	.word	0x000b5458
   b51c8:	abcd330e 	.word	0xabcd330e
   b51cc:	e66d1234 	.word	0xe66d1234
   b51d0:	0005deec 	.word	0x0005deec

000b51d4 <__register_exitproc>:
   b51d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b51d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5294 <__register_exitproc+0xc0>
   b51dc:	4606      	mov	r6, r0
   b51de:	f8d8 0000 	ldr.w	r0, [r8]
   b51e2:	461f      	mov	r7, r3
   b51e4:	460d      	mov	r5, r1
   b51e6:	4691      	mov	r9, r2
   b51e8:	f000 f856 	bl	b5298 <__retarget_lock_acquire_recursive>
   b51ec:	4b25      	ldr	r3, [pc, #148]	; (b5284 <__register_exitproc+0xb0>)
   b51ee:	681c      	ldr	r4, [r3, #0]
   b51f0:	b934      	cbnz	r4, b5200 <__register_exitproc+0x2c>
   b51f2:	4c25      	ldr	r4, [pc, #148]	; (b5288 <__register_exitproc+0xb4>)
   b51f4:	601c      	str	r4, [r3, #0]
   b51f6:	4b25      	ldr	r3, [pc, #148]	; (b528c <__register_exitproc+0xb8>)
   b51f8:	b113      	cbz	r3, b5200 <__register_exitproc+0x2c>
   b51fa:	681b      	ldr	r3, [r3, #0]
   b51fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5200:	6863      	ldr	r3, [r4, #4]
   b5202:	2b1f      	cmp	r3, #31
   b5204:	dd07      	ble.n	b5216 <__register_exitproc+0x42>
   b5206:	f8d8 0000 	ldr.w	r0, [r8]
   b520a:	f000 f847 	bl	b529c <__retarget_lock_release_recursive>
   b520e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5216:	b34e      	cbz	r6, b526c <__register_exitproc+0x98>
   b5218:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b521c:	b988      	cbnz	r0, b5242 <__register_exitproc+0x6e>
   b521e:	4b1c      	ldr	r3, [pc, #112]	; (b5290 <__register_exitproc+0xbc>)
   b5220:	b923      	cbnz	r3, b522c <__register_exitproc+0x58>
   b5222:	f8d8 0000 	ldr.w	r0, [r8]
   b5226:	f000 f838 	bl	b529a <__retarget_lock_release>
   b522a:	e7f0      	b.n	b520e <__register_exitproc+0x3a>
   b522c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5230:	f7ff fa70 	bl	b4714 <malloc>
   b5234:	2800      	cmp	r0, #0
   b5236:	d0f4      	beq.n	b5222 <__register_exitproc+0x4e>
   b5238:	2300      	movs	r3, #0
   b523a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b523e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5242:	6863      	ldr	r3, [r4, #4]
   b5244:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5248:	2201      	movs	r2, #1
   b524a:	409a      	lsls	r2, r3
   b524c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5250:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5254:	4313      	orrs	r3, r2
   b5256:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b525a:	2e02      	cmp	r6, #2
   b525c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5260:	bf02      	ittt	eq
   b5262:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5266:	4313      	orreq	r3, r2
   b5268:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b526c:	6863      	ldr	r3, [r4, #4]
   b526e:	f8d8 0000 	ldr.w	r0, [r8]
   b5272:	1c5a      	adds	r2, r3, #1
   b5274:	3302      	adds	r3, #2
   b5276:	6062      	str	r2, [r4, #4]
   b5278:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b527c:	f000 f80e 	bl	b529c <__retarget_lock_release_recursive>
   b5280:	2000      	movs	r0, #0
   b5282:	e7c6      	b.n	b5212 <__register_exitproc+0x3e>
   b5284:	2003e7e8 	.word	0x2003e7e8
   b5288:	2003e75c 	.word	0x2003e75c
   b528c:	00000000 	.word	0x00000000
   b5290:	000b4715 	.word	0x000b4715
   b5294:	2003e678 	.word	0x2003e678

000b5298 <__retarget_lock_acquire_recursive>:
   b5298:	4770      	bx	lr

000b529a <__retarget_lock_release>:
   b529a:	4770      	bx	lr

000b529c <__retarget_lock_release_recursive>:
   b529c:	4770      	bx	lr

000b529e <link_code_end>:
	...

000b52a0 <dynalib_user>:
   b52a0:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b52b0:	0000 0000 6576 7463 726f 3a3a 4d5f 725f     ....vector::_M_r
   b52c0:	6165 6c6c 636f 695f 736e 7265 0074 0000     ealloc_insert...

000b52d0 <_ZTVN5spark13EthernetClassE>:
	...
   b52d8:	47d3 000b 47c9 000b 47bf 000b 47b5 000b     .G...G...G...G..
   b52e8:	47a9 000b 479d 000b 49c5 000b 49cd 000b     .G...G...I...I..
   b52f8:	4791 000b 4789 000b 477f 000b 4775 000b     .G...G...G..uG..
   b5308:	49fd 000b                                   .I..

000b530c <_ZTV7TwoWire>:
	...
   b5314:	47f1 000b 483b 000b 4813 000b 47f3 000b     .G..;H...H...G..
   b5324:	481b 000b 4823 000b 482b 000b 4833 000b     .H..#H..+H..3H..

000b5334 <_ZTV9IPAddress>:
	...
   b533c:	4895 000b 4885 000b 4887 000b 7061 0070     .H...H...H..app.

000b534c <_ZTVN5spark12NetworkClassE>:
	...
   b5354:	4985 000b 498f 000b 4999 000b 49a3 000b     .I...I...I...I..
   b5364:	49ad 000b 49b9 000b 49c5 000b 49cd 000b     .I...I...I...I..
   b5374:	49d5 000b 49e1 000b 49e9 000b 49f3 000b     .I...I...I...I..
   b5384:	49fd 000b 5925 252d 2d6d 6425 2554 3a48     .I..%Y-%m-%dT%H:
   b5394:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b53a4 <_ZTV11USARTSerial>:
	...
   b53ac:	4bd5 000b 4c41 000b 4c19 000b 4ae9 000b     .K..AL...L...J..
   b53bc:	4be9 000b 4c05 000b 4bf7 000b 4c13 000b     .K...L...K...L..
   b53cc:	4bd7 000b 4bdb 000b                         .K...K..

000b53d4 <_ZTV9USBSerial>:
	...
   b53dc:	4c7f 000b 4ce7 000b 4cbd 000b 4ae9 000b     .L...L...L...J..
   b53ec:	4caf 000b 4c81 000b 4c91 000b 4ce1 000b     .L...L...L...L..
   b53fc:	4ca1 000b 4c79 000b                         .L..yL..

000b5404 <_ZTVN5spark9WiFiClassE>:
	...
   b540c:	4ddf 000b 4dd5 000b 4dcb 000b 4d81 000b     .M...M...M...M..
   b541c:	4dbf 000b 4db3 000b 49c5 000b 49cd 000b     .M...M...I...I..
   b542c:	4da7 000b 4d9f 000b 4d95 000b 4d8b 000b     .M...M...M...M..
   b543c:	49fd 000b                                   .I..

000b5440 <_ZSt7nothrow>:
   b5440:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5450:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5460:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5470:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5480:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5490:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b54a0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b54b1 <link_const_data_end>:
   b54b1:	00          	.byte	0x00
	...

000b54b4 <link_constructors_location>:
   b54b4:	000b4371 	.word	0x000b4371
   b54b8:	000b4765 	.word	0x000b4765
   b54bc:	000b47dd 	.word	0x000b47dd
   b54c0:	000b4975 	.word	0x000b4975
   b54c4:	000b4ad5 	.word	0x000b4ad5
   b54c8:	000b4b7d 	.word	0x000b4b7d
   b54cc:	000b4b9d 	.word	0x000b4b9d
   b54d0:	000b4bc1 	.word	0x000b4bc1
   b54d4:	000b4de9 	.word	0x000b4de9
